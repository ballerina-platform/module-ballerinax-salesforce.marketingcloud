{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Salesforce Marketing Cloud APIs",
    "description" : "Salesforce Marketing Cloud APIs provide programmatic access to features such as Address, Assets (Content Builder), Audit, Contacts, Data Events, Event Notification, Interactions (Journey Builder), Push, SMS, Transactional Messaging, and Messaging. Refer to the official Salesforce documentation for detailed API usage and guidelines.",
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "https://{{et_subdomain}}.rest.marketingcloudapis.com"
  } ],
  "security" : [ {
    "OAuth2ClientCredentials" : [ ]
  } ],
  "tags" : [ {
    "name" : "Messaging & Journeys"
  }, {
    "name" : "Messaging & Journeys > REST"
  }, {
    "name" : "Messaging & Journeys > REST > Auth"
  }, {
    "name" : "Messaging & Journeys > REST > Address"
  }, {
    "name" : "Messaging & Journeys > REST > Assets (Content Builder)",
    "description" : "https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/content-api.htm"
  }, {
    "name" : "Messaging & Journeys > REST > Assets (Content Builder) > Categories (Folders)"
  }, {
    "name" : "Messaging & Journeys > REST > Assets (Content Builder) > Query"
  }, {
    "name" : "Messaging & Journeys > REST > Assets (Content Builder) > Content"
  }, {
    "name" : "Messaging & Journeys > REST > Audit"
  }, {
    "name" : "Messaging & Journeys > REST > Contacts"
  }, {
    "name" : "Messaging & Journeys > REST > Data Events"
  }, {
    "name" : "Messaging & Journeys > REST > Data Events > Asynchronous"
  }, {
    "name" : "Messaging & Journeys > REST > Data Events > Synchronous"
  }, {
    "name" : "Messaging & Journeys > REST > Event Notification"
  }, {
    "name" : "Messaging & Journeys > REST > Event Notification > Callback"
  }, {
    "name" : "Messaging & Journeys > REST > Event Notification > Subscriptions"
  }, {
    "name" : "Messaging & Journeys > REST > Interactions (Journey Builder)"
  }, {
    "name" : "Messaging & Journeys > REST > Interactions (Journey Builder) > Event Definitions"
  }, {
    "name" : "Messaging & Journeys > REST > Interactions (Journey Builder) > Journeys"
  }, {
    "name" : "Messaging & Journeys > REST > Push"
  }, {
    "name" : "Messaging & Journeys > REST > Push > Location"
  }, {
    "name" : "Messaging & Journeys > REST > SMS"
  }, {
    "name" : "Messaging & Journeys > REST > Transactional Messaging"
  }, {
    "name" : "Messaging & Journeys > REST > Transactional Messaging > Email"
  }, {
    "name" : "Messaging & Journeys > REST > Transactional Messaging > SMS"
  }, {
    "name" : "Messaging & Journeys > REST > Messaging"
  }, {
    "name" : "Messaging & Journeys > REST > Data",
    "description" : "[https://help.salesforce.com/s/articleView?id=sf.mc_rn_2024_spring_as_single_use_de_import.htm&amp;type=5](https://help.salesforce.com/s/articleView?id=sf.mc_rn_2024_spring_as_single_use_de_import.htm&type=5)\n\n# **Data Extension Imports**\n\nYou can use the Data Extension Import APIs to import data from various file transfer locations to a data extension, without creating an import definition.\n\nYou can import from pre-signed file sources such as, Amazon Web Service (AWS) and Microsoft Azure without configuring file transfer locations."
  } ],
  "paths" : {
    "/interaction/v1/eventDefinitions" : {
      "get" : {
        "tags" : [ "Messaging & Journeys > REST > Interactions (Journey Builder) > Event Definitions" ],
        "summary" : "Get Event Definitions",
        "description" : "Retrieves a collection of event definitions.",
        "operationId" : "getEventDefinitions",
        "parameters" : [ {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Filter event definitions by name substring",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of event definitions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventDefinitionList"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Messaging & Journeys > REST > Interactions (Journey Builder) > Event Definitions" ],
        "summary" : "Create Event Definition",
        "description" : "Creates an event definition (name and data schema for an event) and defines an event definition key. The resource uses this key when firing an event to send it to the appropriate journey. Typically, marketers create the event definition in the Journey Builder UI. Use this resource instead if you are using a custom application for Journey Builder functionality.",
        "operationId" : "createEventDefinition",
        "requestBody" : {
          "description" : "Payload to be sent with the request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EventDefinition"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Event Definition created successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/interaction/v1/eventDefinitions/key:{eventDefinitionKey}" : {
      "get" : {
        "tags" : [ "Messaging & Journeys > REST > Interactions (Journey Builder) > Event Definitions" ],
        "summary" : "Get Event Definitions - By Key",
        "description" : "Retrieves an individual event definition by key.",
        "operationId" : "getEventDefinitionByKey",
        "parameters" : [ {
          "name" : "eventDefinitionKey",
          "in" : "path",
          "description" : "Key of the event definition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Event definition details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventDefinition"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Messaging & Journeys > REST > Interactions (Journey Builder) > Event Definitions" ],
        "summary" : "Update Event Definition - By Key",
        "description" : "Updates an event definition by key. Once an event definition is created, only a few properties can be updated.",
        "operationId" : "updateEventDefinitionByKey",
        "parameters" : [ {
          "name" : "eventDefinitionKey",
          "in" : "path",
          "description" : "Key of the event definition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Payload to be sent with the request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EventDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventDefinition"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Messaging & Journeys > REST > Interactions (Journey Builder) > Event Definitions" ],
        "summary" : "Delete Event Definition - By Key",
        "description" : "Deletes an individual event definition by key.",
        "operationId" : "deleteEventDefinitionByKey",
        "parameters" : [ {
          "name" : "eventDefinitionKey",
          "in" : "path",
          "description" : "Key of the event definition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/interaction/v1/eventDefinitions/{eventDefinitionId}" : {
      "put" : {
        "tags" : [ "Messaging & Journeys > REST > Interactions (Journey Builder) > Event Definitions" ],
        "summary" : "Update Event Definition - By ID",
        "description" : "Updates an event definition by ID. Once an event definition is created, only a few properties can be updated.",
        "operationId" : "updateEventDefinitionById",
        "parameters" : [ {
          "name" : "eventDefinitionId",
          "in" : "path",
          "description" : "ID of the event definition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Payload to be sent with the request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EventDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventDefinition"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Messaging & Journeys > REST > Interactions (Journey Builder) > Event Definitions" ],
        "summary" : "Delete Event Definition - By ID",
        "description" : "Deletes an individual event definition by ID.",
        "operationId" : "deleteEventDefinitionById",
        "parameters" : [ {
          "name" : "eventDefinitionId",
          "in" : "path",
          "description" : "ID of the event definition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/interaction/v1/events" : {
      "post" : {
        "tags" : [ "Messaging & Journeys > REST > Interactions (Journey Builder)" ],
        "summary" : "Fire Entry Event",
        "description" : "Fires the entry event that initiates the journey.",
        "operationId" : "fireEntryEvent",
        "requestBody" : {
          "description" : "Payload to be sent with the request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FireEvent"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FireEventResponse"
                }
              }
            }
          }
        }
      }
    },
    "/interaction/v1/interactions" : {
      "get" : {
        "tags" : [ "Messaging & Journeys > REST > Interactions (Journey Builder) > Journeys" ],
        "summary" : "Get Interactions (Journeys)",
        "description" : "Retrieves a collection of all journeys. The journey collection resources are embedded in the items property of the response body. Use both a sort order and paging to minimize the response size and response time.",
        "operationId" : "getJourneys",
        "parameters" : [ {
          "name" : "$orderBy",
          "in" : "query",
          "description" : "The field and sort method to use to sort the results. You can sort on these fields: ModifiedDate, Name, Performance. You can sort these fields in ascending (ASC) or descending (DESC) order. The default value is modifiedDate DESC",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "ModifiedDate DESC"
          },
          "x-ballerina-name" : "orderBy"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "name" : "definitionType",
          "in" : "query",
          "description" : "The type of definition to retrieve. The only accepted value is transactional, which retrieves all transactional send definitions",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "transactional" ]
          }
        }, {
          "$ref" : "#/components/parameters/extras"
        }, {
          "name" : "mostRecentVersionOnly",
          "in" : "query",
          "description" : "Use this parameter to specify whether to return the most recent version of each journey that matches the filter criteria. The default value is true",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        }, {
          "name" : "nameOrDescription",
          "in" : "query",
          "description" : "A search string to apply to the request. The API searches the name and description of each journey for this string, and returns all matching journeys",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "specificApiVersionNumber",
          "in" : "query",
          "description" : "The version number of the workflowApiVersion value to retrieve. The default value is 1",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number",
            "default" : 1
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "A journey status value to use to filter the results. Possible values are: Deleted, Draft, Published, ScheduledToPublish, Stopped, Unpublished. The ScheduledToSend, Sent, and Stopped statuses exist only in single-send journeys. If you don't specify a status value, the API returns all journeys regardless of their statuses",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/JourneyStatus"
          }
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "A tag to use to filter the results. When you specify this parameter, the API returns only journeys with the specified tag",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "versionNumber",
          "in" : "query",
          "description" : "The version number of the journey to retrieve. The default value is the currently published version or the latest version number that meets the other search criteria",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JourneysList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Update an existing Journey version",
        "operationId" : "updateJourney",
        "requestBody" : {
          "description" : "Request body for updating an existing journey",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateJourney"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Journey updated successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Journey"
                }
              }
            }
          },
          "304" : {
            "description" : "No changes detected; request data matches server",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NoChangeResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Messaging & Journeys > REST > Interactions (Journey Builder) > Journeys" ],
        "summary" : "Create Interaction (Journey) - Simple Journey",
        "description" : "Creates or saves a journey. To create a new journey provide the request body in the appropriate Journey Specification. Please read the Journey Spec page to understand which properties are required to create a journey via the API. The id, key, createdDate, modifiedDate, status and definitionId are assigned by Journey Builder and are never to be passed in as parameters for creating a journey.",
        "operationId" : "createJourney",
        "requestBody" : {
          "description" : "Request body for creating a new journey",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Journey"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Journey"
                }
              }
            }
          }
        }
      }
    },
    "/interaction/v1/interactions/contactMembership" : {
      "post" : {
        "tags" : [ "Messaging & Journeys > REST > Interactions (Journey Builder)" ],
        "summary" : "Get List Of Journeys Contact Is In",
        "description" : "Provides a list of journeys and journey versions for a list of contact keys.",
        "operationId" : "getContactMembership",
        "requestBody" : {
          "description" : "Payload to be sent with the request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactMembershipRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful response with contact list memberships",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactMembershipResponse"
                }
              }
            }
          }
        }
      }
    },
    "/interaction/v1/interactions/contactexit" : {
      "post" : {
        "tags" : [ "Messaging & Journeys > REST > Interactions (Journey Builder)" ],
        "summary" : "Remove Contact From Journey",
        "description" : "Removes up to 50 contacts from a journey or from one or more versions of a journey.",
        "operationId" : "removeContactFromJourney",
        "requestBody" : {
          "description" : "Payload to be sent with the request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactExitRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Accepted – contact exit request successfully received",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactExitResponse"
                }
              }
            }
          }
        }
      }
    },
    "/interaction/v1/interactions/contactexit/status" : {
      "post" : {
        "tags" : [ "Messaging & Journeys > REST > Interactions (Journey Builder)" ],
        "summary" : "Get Contact Journey Exit Status",
        "description" : "Returns the status of a request to remove a contact from a journey or from one or more versions of a journey.",
        "operationId" : "getContactExitStatus",
        "requestBody" : {
          "description" : "Payload to be sent with the request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactExitRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Status of contact removal returned successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactExitStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/interaction/v1/interactions/{journeyId}" : {
      "get" : {
        "tags" : [ "Messaging & Journeys > REST > Interactions (Journey Builder) > Journeys" ],
        "summary" : "Get Interactions (Journeys) - By ID",
        "description" : "Retrieves a single journey by ID.",
        "operationId" : "getJourneyById",
        "parameters" : [ {
          "name" : "journeyId",
          "in" : "path",
          "description" : "ID of version 1 of the journey in the form of a GUID (UUID)",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "versionNumber",
          "in" : "query",
          "description" : "Version number of the journey to retrieve. If not provided, the latest version is returned",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "extras",
          "in" : "query",
          "description" : "A list of additional data to fetch. Available values are: all, activities, outcomes, and stats. Default is ''",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Extras"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Journey"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Update an existing Journey version",
        "operationId" : "updateJourneyById",
        "parameters" : [ {
          "name" : "journeyId",
          "in" : "path",
          "description" : "ID of the journey in the form of a GUID (UUID)",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Request body for updating an existing journey",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateJourney"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Journey updated successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Journey"
                }
              }
            }
          },
          "304" : {
            "description" : "No changes detected; request data matches server",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NoChangeResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Messaging & Journeys > REST > Interactions (Journey Builder) > Journeys" ],
        "summary" : "Delete Interaction (Journey) - By ID",
        "description" : "Deletes a journey by ID. When deleting last version of a journey, check if the journey is associated with a tag and unassociated the tag using the deleteTags resource.",
        "operationId" : "deleteJourneyById",
        "parameters" : [ {
          "name" : "journeyId",
          "in" : "path",
          "description" : "ID of the journey in the form of a GUID (UUID). The ID deletes all versions of the journey, unless a versionNumber is provided",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "versionNumber",
          "in" : "query",
          "description" : "Version number of the journey to delete. If no version is specified, ALL versions associated with the provided ID will be deleted",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/interaction/v1/interactions/key:{key}" : {
      "get" : {
        "tags" : [ "Messaging & Journeys > REST > Interactions (Journey Builder) > Journeys" ],
        "summary" : "Get Interactions (Journeys) - By Key",
        "description" : "Retrieves a single journey by Key.",
        "operationId" : "getJourneyByKey",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "The key of the journey",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "versionNumber",
          "in" : "query",
          "description" : "Version number of the journey to retrieve. If not provided, the latest version is returned",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "extras",
          "in" : "query",
          "description" : "A list of additional data to fetch. Available values are: all, activities, outcomes, and stats. Default is ''",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Extras"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Journey"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Update existing Journey version",
        "operationId" : "updateJourneyByKey",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "The key of the journey",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Request body for updating an existing journey",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateJourney"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Journey updated successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Journey"
                }
              }
            }
          },
          "304" : {
            "description" : "No changes detected; request data matches server",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NoChangeResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Messaging & Journeys > REST > Interactions (Journey Builder) > Journeys" ],
        "summary" : "Delete Interaction (Journey) - By Key",
        "description" : "Deletes a journey by Key. When deleting last version of a journey, check if the journey is associated with a tag and unassociated the tag using the deleteTags resource.",
        "operationId" : "deleteJourneyByKey",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Key of the journey. The Key deletes all versions of the journey, unless a versionNumber is provided",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "versionNumber",
          "in" : "query",
          "description" : "Version number of the journey to delete. If no version is specified, ALL versions associated with the provided ID will be deleted",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/address/v1/validateEmail" : {
      "post" : {
        "tags" : [ "Messaging & Journeys > REST > Address" ],
        "summary" : "Validate Address",
        "description" : "Validates an email by specifying the email address and validators to be used in the request body of the HTTP POST. You can use more than one validator in the same call.",
        "operationId" : "validateEmail",
        "requestBody" : {
          "description" : "Payload to be sent with the request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ValidateEmailRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidateEmailResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hub/v1/dataevents/key:{dEExternalKey}/rowset" : {
      "post" : {
        "tags" : [ "Messaging & Journeys > REST > Data Events > Synchronous" ],
        "summary" : "Upsert Row Set - DE Key",
        "description" : "The API upserts multiple data extension rows in a single synchronous call using Data Extension's External Key.",
        "operationId" : "upsertDERowSetByKey",
        "parameters" : [ {
          "name" : "dEExternalKey",
          "in" : "path",
          "description" : "External Key of the Data Extension",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Payload to be sent with the request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DataExtensionRowSet"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DataExtensionRowSet"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/v1/addresses/search/{attributeName}" : {
      "post" : {
        "tags" : [ "Messaging & Journeys > REST > Contacts" ],
        "summary" : "Search Contacts by Attribute",
        "description" : "Searches for contacts based on a specific attribute. The attribute name is provided in the path parameter.",
        "operationId" : "searchContactsByAttribute",
        "parameters" : [ {
          "name" : "attributeName",
          "in" : "path",
          "description" : "The name of the attribute to search by",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ContactAttributeName"
          }
        } ],
        "requestBody" : {
          "description" : "Payload to be sent with the request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactAttributeFilterCondition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchContactsByAttributeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/v1/addresses/email/search" : {
      "post" : {
        "tags" : [ "Messaging & Journeys > REST > Contacts" ],
        "summary" : "Search Contacts by Email",
        "description" : "Searches for contacts based on an email address.",
        "operationId" : "searchContactsByEmail",
        "requestBody" : {
          "description" : "Payload to be sent with the request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SearchContactsByEmailRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchContactsByEmailResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/v1/contacts" : {
      "post" : {
        "tags" : [ "Messaging & Journeys > REST > Contacts" ],
        "summary" : "Create Contacts",
        "description" : "Creates a new contact with the specified information in the specified attribute groups.",
        "operationId" : "createContact",
        "requestBody" : {
          "description" : "Payload to be sent with the request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpsertContactRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpsertContactResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Messaging & Journeys > REST > Contacts" ],
        "summary" : "Update Contacts",
        "description" : "Updates contacts with the specified information in the specified attribute groups.",
        "operationId" : "updateContact",
        "requestBody" : {
          "description" : "Payload to be sent with the request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpsertContactRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpsertContactResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/v1/contacts/actions/delete" : {
      "post" : {
        "tags" : [ "Messaging & Journeys > REST > Contacts" ],
        "summary" : "Delete Contact - By Key",
        "description" : "Deletes contacts based on specified contact key values. This operation runs asynchronously. Use the OperationID value returned to check the status of the delete.",
        "operationId" : "deleteContact",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "Type of contact to delete. Possible values are: ids, keys. If not specified, defaults to 'ids'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ids", "keys" ]
          }
        } ],
        "requestBody" : {
          "description" : "Payload to be sent with the request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactDeleteRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactDeleteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/v1/contacts/analytics/deleterequests" : {
      "get" : {
        "tags" : [ "Messaging & Journeys > REST > Contacts" ],
        "summary" : "Get Contact Delete Request Details",
        "description" : "Retrieves details of contact delete requests for a date range.",
        "operationId" : "getContactDeleteRequests",
        "parameters" : [ {
          "name" : "startdateutc",
          "in" : "query",
          "description" : "Start date and time in UTC of the date range",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "enddateutc",
          "in" : "query",
          "description" : "End date and time in UTC of the date range",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "statusid",
          "in" : "query",
          "description" : "Delete request status ID. Use it to filter delete requests by status. Valid values are 1 - Processing, 5 - Completed, and 7 - Invalid",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "enum" : [ 1, 5, 7 ]
          }
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "name" : "$orderBy",
          "in" : "query",
          "description" : "Determines which property to use for sorting and the direction in which to sort the data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "orderBy"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactDeleteRequestsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/v1/contacts/key:{contactKey}/preferences" : {
      "get" : {
        "tags" : [ "Messaging & Journeys > REST > Contacts" ],
        "summary" : "Get Contact Preferences",
        "description" : "Retrieves the preferences of a contact by their contact key.",
        "operationId" : "getContactPreferencesByKey",
        "parameters" : [ {
          "name" : "contactKey",
          "in" : "path",
          "description" : "The contact key of the contact whose preferences are to be retrieved",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactPreferencesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/v1/contacts/preferences" : {
      "post" : {
        "tags" : [ "Messaging & Journeys > REST > Contacts" ],
        "summary" : "Upsert Contact Preferences",
        "description" : "Upsert the preferences of a contact by their contact key.",
        "operationId" : "upsertContactPreferences",
        "requestBody" : {
          "description" : "Payload to be sent with the request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactPreferencesRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpsertContactPreferencesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/v1/contacts/preferences/search" : {
      "post" : {
        "tags" : [ "Messaging & Journeys > REST > Contacts" ],
        "summary" : "Search Contact Preferences",
        "description" : "Searches for contact preferences based on specified criteria.",
        "operationId" : "searchContactPreferences",
        "parameters" : [ {
          "name" : "ReferenceType",
          "in" : "query",
          "description" : "For contact key, use 1. For contact ID, use 2",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "enum" : [ 1, 2 ]
          },
          "x-ballerina-name" : "referenceType"
        } ],
        "requestBody" : {
          "description" : "Payload to be sent with the request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SearchPreferencesRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchPreferencesResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "EventDefinitionList" : {
        "type" : "object",
        "properties" : {
          "pageSize" : {
            "type" : "integer",
            "description" : "Number of items per page"
          },
          "page" : {
            "type" : "integer",
            "description" : "Current page number"
          },
          "items" : {
            "type" : "array",
            "description" : "Array of event definitions",
            "items" : {
              "$ref" : "#/components/schemas/EventDefinition"
            }
          }
        },
        "description" : "List of event definitions"
      },
      "SearchPreferencesResponse" : {
        "required" : [ "items", "requestServiceMessageID", "responseDateTime", "resultMessages", "rowsAffected", "serviceMessageID" ],
        "type" : "object",
        "properties" : {
          "responseDateTime" : {
            "type" : "string",
            "description" : "Date and time of the response",
            "format" : "date-time"
          },
          "rowsAffected" : {
            "type" : "integer",
            "description" : "Number of rows returned"
          },
          "serviceMessageID" : {
            "type" : "string",
            "description" : "Service message ID for the response",
            "format" : "uuid"
          },
          "requestServiceMessageID" : {
            "type" : "string",
            "description" : "Service message ID for the request",
            "format" : "uuid"
          },
          "resultMessages" : {
            "type" : "array",
            "description" : "Array of messages about the request",
            "items" : {
              "type" : "object"
            }
          },
          "items" : {
            "type" : "array",
            "description" : "Array of contact preferences found",
            "items" : {
              "$ref" : "#/components/schemas/ContactPreferenceEntity"
            }
          }
        },
        "description" : "Response for searching contact preferences",
        "example" : {
          "items" : [ {
            "contactID" : 12345,
            "hasOptedOutTracking" : false
          } ],
          "rowsAffected" : 1,
          "requestServiceMessageID" : "d613f535-eea8-435e-a59c-59ec6ab4bebd",
          "responseDateTime" : "2019-01-23T15:04:14.7305707-06:00",
          "resultMessages" : [ ],
          "serviceMessageID" : "29029de0-abe4-4216-985d-4a8d78883dfa"
        }
      },
      "Address" : {
        "type" : "object",
        "properties" : {
          "contactID" : {
            "type" : "object",
            "description" : "Type-value object specifying ContactID tied to given address"
          },
          "addressTypeID" : {
            "type" : "integer",
            "description" : "Type of the retrieved address: EMAIL: 1 MOBILE: 4 PUSH: 9 LINE: 10"
          },
          "addressKey" : {
            "type" : "object",
            "description" : "Type-value object specifying the AddressKey for retrieved address"
          },
          "modifiedDate" : {
            "type" : "string",
            "description" : "Last modified date value of retrieved address"
          },
          "contactKey" : {
            "type" : "object",
            "description" : "Type-value object specifying ContactKey tied to given address"
          },
          "valueSets" : {
            "type" : "array",
            "description" : "Object array containing value set information of pertinent attributes retrieved for address",
            "items" : {
              "$ref" : "#/components/schemas/AddressValueSets"
            }
          },
          "source" : {
            "type" : "integer",
            "description" : "Source value of retrieved address"
          },
          "addressID" : {
            "type" : "object",
            "description" : "Type-value object specifying the AddressID for retrieved address"
          },
          "status" : {
            "type" : "integer",
            "description" : "Status value of retrieved address"
          },
          "ordinal" : {
            "type" : "integer",
            "description" : "Ordinal value of retrieved address"
          }
        }
      },
      "JourneysList" : {
        "required" : [ "count", "items", "page", "pageSize" ],
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "Total number of journeys returned in this page"
          },
          "items" : {
            "type" : "array",
            "description" : "Array of journey definitions",
            "items" : {
              "$ref" : "#/components/schemas/Journey"
            }
          },
          "page" : {
            "type" : "integer",
            "description" : "Current page number"
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "Total number of available pages"
          }
        },
        "additionalProperties" : true,
        "description" : "Response containing a collection of journeys"
      },
      "AddressValues" : {
        "type" : "object",
        "properties" : {
          "valueID" : {
            "type" : "string",
            "description" : "An auto-generated guid representing a retrieved attribute value for the retrieved address",
            "format" : "uuid"
          },
          "definitionName" : {
            "type" : "string",
            "description" : "The value definition name of a retrieved attribute for retrieved address"
          },
          "innerValue" : {
            "type" : "string",
            "description" : "Actual value of a retrieved attribute for the retrieved address"
          },
          "definitionKey" : {
            "type" : "string",
            "description" : "The value definition key of a retrieved attribute for retrieved address"
          },
          "definitionID" : {
            "type" : "string",
            "description" : "The value definition ID of a retrieved attribute for retrieved address",
            "format" : "uuid"
          }
        }
      },
      "DataExtensionRow" : {
        "required" : [ "keys", "values" ],
        "type" : "object",
        "properties" : {
          "keys" : {
            "type" : "object",
            "description" : "A map of key fields for the data extension row. The property names and types are arbitrary and depend on the data extension definition"
          },
          "values" : {
            "type" : "object",
            "description" : "A map of value fields for the data extension row. The property names and types are arbitrary and depend on the data extension definition"
          }
        },
        "example" : {
          "keys" : {
            "SubscriberKey" : "5c68f5c7f230288ba735091"
          },
          "values" : {
            "FirstName" : "John",
            "FollowerCount" : 2,
            "IsActive" : true,
            "LastLogin" : "2018-05-23T14:32:00Z",
            "LastName" : "Smith"
          }
        }
      },
      "ValidateEmailRequest" : {
        "required" : [ "email", "validators" ],
        "type" : "object",
        "properties" : {
          "validators" : {
            "type" : "array",
            "description" : "List of validators to apply to the email address",
            "items" : {
              "type" : "string",
              "enum" : [ "SyntaxValidator", "MXValidator", "ListDetectiveValidator" ]
            }
          },
          "email" : {
            "type" : "string",
            "description" : "Email address to validate"
          }
        },
        "description" : "Request body for validating an email address",
        "example" : {
          "email" : "help@example.com",
          "validators" : [ "SyntaxValidator", "MXValidator", "ListDetectiveValidator" ]
        }
      },
      "Activity" : {
        "required" : [ "key", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique ID for the activity."
          },
          "key" : {
            "type" : "string",
            "description" : "The unique customer key for the activity."
          },
          "name" : {
            "type" : "string",
            "description" : "The display name for this activity."
          },
          "type" : {
            "type" : "string",
            "description" : "Defines the activity type. The expected input for each activity must be passed as an argument to operate correctly."
          },
          "outcomes" : {
            "type" : "array",
            "description" : "An array of outcome objects.",
            "items" : {
              "$ref" : "#/components/schemas/ActivityOutcomes"
            }
          },
          "arguments" : {
            "type" : "object",
            "additionalProperties" : true,
            "description" : "An object that represents the arguments that the activity expects to be passed at runtime. Each activity type requires a different set of parameters."
          },
          "configurationArguments" : {
            "type" : "object",
            "additionalProperties" : true,
            "description" : "An object that represents the arguments that the activity expects to be passed at publish and runtime. Each activity type requires a different set of parameters."
          }
        },
        "additionalProperties" : true,
        "description" : "Represents a single activity in a journey"
      },
      "Extras" : {
        "type" : "string",
        "description" : "Extras to include. Values:\n- all: Fetch all extras\n- activities: Include journey activities\n- outcomes: Include journey outcomes\n- stats: Include journey statistics\n- '': No extras (default)",
        "enum" : [ "all", "activities", "outcomes", "stats", "" ]
      },
      "EventDefinition" : {
        "required" : [ "eventDefinitionKey", "name", "type" ],
        "type" : "object",
        "properties" : {
          "schema" : {
            "type" : "object",
            "description" : "Schema information for an event. The call uses this information to create a data extension associated with the Event Definition. Only required when not providing a dataExtensionId value"
          },
          "eventDefinitionKey" : {
            "type" : "string",
            "description" : "Unique customer key for the event definition. Used to reference this event in API calls and journeys"
          },
          "mode" : {
            "type" : "string",
            "description" : "Operation mode of the event definition. Can be 'Production' or 'Test'",
            "enum" : [ "Production", "Test" ]
          },
          "schedule" : {
            "$ref" : "#/components/schemas/EventDefinitionSchedule"
          },
          "metaData" : {
            "type" : "object",
            "additionalProperties" : true,
            "description" : "Optional metadata for the event definition. Can include additional information or settings"
          },
          "sourceApplicationExtensionId" : {
            "type" : "string",
            "description" : "A link to the application extension that defines the configuration screens for this type. Journey Builder uses this ID to filter shared entry sources. For example, for the Event Definition to be visible in the Existing Entry sources panel in the UI, this field must be populated. To obtain this value, perform a GET eventDefinition on similar events in Journey Builder"
          },
          "isVisibleInPicker" : {
            "type" : "boolean",
            "description" : "If true, makes this event visible in the Journey Builder Event Picker UI"
          },
          "configuration" : {
            "type" : "object",
            "additionalProperties" : true,
            "description" : "Optional configuration data for the event definition. Can include additional settings or parameters"
          },
          "name" : {
            "type" : "string",
            "description" : "Display name for the event definition. Visible in Journey Builder UI"
          },
          "description" : {
            "type" : "string",
            "description" : "Optional description for the event definition, visible in UI"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the event definition (e.g., 'RestEvent')",
            "enum" : [ "Event", "ContactEvent", "DateEvent", "RestEvent" ]
          },
          "dataExtensionId" : {
            "type" : "string",
            "description" : "ID of the Data Extension used as the data source for the event. Optional if 'schema' is provided inline"
          }
        },
        "description" : "Represents an event definition in Journey Builder. An event definition is a reusable component that defines how an event is triggered and processed within a journey"
      },
      "ContactPreferenceEntity" : {
        "description": "Represents a contact preference entity",
        "required" : [ "contactID" ],
        "type" : "object",
        "properties" : {
          "hasOptedOutTracking" : {
            "type" : "boolean",
            "description" : "Indicates whether a contact opted out of tracking information"
          },
          "contactID" : {
            "type" : "integer",
            "description" : "Unique ID for the contact"
          }
        }
      },
      "ActivityOutcomes" : {
        "required" : [ "key", "next" ],
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string",
            "description" : "The unique customer key for the outcome."
          },
          "next" : {
            "type" : "string",
            "description" : "A string that maps to a valid journey activity key."
          }
        },
        "additionalProperties" : true
      },
      "FireEvent" : {
        "required" : [ "ContactKey", "EventDefinitionKey" ],
        "type" : "object",
        "properties" : {
          "EventDefinitionKey" : {
            "type" : "string",
            "description" : "Key of the entry event defined in Journey Builder",
            "x-ballerina-name" : "eventDefinitionKey"
          },
          "ContactKey" : {
            "type" : "string",
            "description" : "Unique identifier for the contact",
            "x-ballerina-name" : "contactKey"
          },
          "Data" : {
            "type" : "object",
            "additionalProperties" : true,
            "description" : "Additional attributes required by the entry event schema",
            "x-ballerina-name" : "data"
          }
        },
        "example" : {
          "ContactKey" : "DD301",
          "Data" : {
            "Email" : "aaron.cates@salesforce.com",
            "First_Name" : "Aaron",
            "Last_Name" : "Cates",
            "SubscriberKey" : "DD301"
          },
          "EventDefinitionKey" : "APIEvent-0dbe46de-74f9-a309-7778-298c0a565f93"
        }
      },
      "Goal" : {
        "required" : [ "key", "name" ],
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string",
            "description" : "The customer key for this goal."
          },
          "name" : {
            "type" : "string",
            "description" : "The display name for this goal."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of goal this is (only option currently is ContactEvent).",
            "enum" : [ "ContactEvent" ]
          },
          "description" : {
            "type" : "string",
            "description" : "The description for this goal, will be displayed in the Journey Builder user interface."
          },
          "metaData" : {
            "type" : "object",
            "additionalProperties" : true,
            "description" : "A set of properties which are not specific to the definition or execution of this Event, but are related to it."
          },
          "conversionUnit" : {
            "type" : "string",
            "description" : "This value is used for deterministic evaluations of the goal, can be either 'percentage' or 'wholenumber'.",
            "enum" : [ "percentage", "wholenumber" ]
          },
          "conversionValue" : {
            "type" : "number",
            "description" : "Based on the conversionUnit this is the metric Journey Builder uses to determine if the goal has been satisfied."
          }
        },
        "additionalProperties" : true,
        "description" : "Represents a goal in a journey"
      },
      "ContactMembership" : {
        "type" : "object",
        "properties" : {
          "contactMemberships" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContactMembershipDetail"
            }
          },
          "contactsNotFound" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "SearchContactsByAttributeResponse" : {
        "type" : "object",
        "properties" : {
          "addresses" : {
            "type" : "array",
            "description" : "Array of all address objects retrieved",
            "items" : {
              "$ref" : "#/components/schemas/Address"
            }
          },
          "pageNumber" : {
            "type" : "integer",
            "description" : "Page number of results retrieved"
          },
          "hasErrors" : {
            "type" : "boolean",
            "description" : "Indicates errors occured while processing the request"
          },
          "serviceMessageID" : {
            "type" : "string",
            "description" : "Service message ID value of the response",
            "format" : "uuid"
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "Page size of results retrieved"
          },
          "requestServiceMessageID" : {
            "type" : "string",
            "description" : "Service message ID value of the request",
            "format" : "uuid"
          },
          "resultMessages" : {
            "type" : "array",
            "description" : "Array of returned messages generated while processing the request",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "SearchContactsByEmailResponse" : {
        "required" : [ "channelAddressResponseEntities" ],
        "type" : "object",
        "properties" : {
          "operationStatus" : {
            "type" : "string",
            "description" : "Current operation status"
          },
          "serviceMessageID" : {
            "type" : "string",
            "description" : "Service message ID for the response",
            "format" : "uuid"
          },
          "channelAddressResponseEntities" : {
            "type" : "array",
            "description" : "List of contact keys with their created date and time",
            "items" : {
              "$ref" : "#/components/schemas/ChannelAddressResponseEntities"
            }
          },
          "requestServiceMessageID" : {
            "type" : "string",
            "description" : "Service message ID for the request",
            "format" : "uuid"
          }
        },
        "description" : "Response contains a list of contact keys with their created date and time"
      },
      "UpsertContactPreferencesResponse" : {
        "required" : [ "items", "requestServiceMessageID", "responseDateTime", "resultMessages", "rowsDeleted", "rowsInserted", "rowsUpdated", "serviceMessageID" ],
        "type" : "object",
        "properties" : {
          "responseDateTime" : {
            "type" : "string",
            "description" : "Date and time of the response",
            "format" : "date-time"
          },
          "rowsUpdated" : {
            "type" : "integer",
            "description" : "Number of rows updated"
          },
          "serviceMessageID" : {
            "type" : "string",
            "description" : "Service message ID for the response",
            "format" : "uuid"
          },
          "rowsDeleted" : {
            "type" : "integer",
            "description" : "Number of rows deleted"
          },
          "requestServiceMessageID" : {
            "type" : "string",
            "description" : "Service message ID for the request",
            "format" : "uuid"
          },
          "resultMessages" : {
            "type" : "array",
            "description" : "Array of messages about the request",
            "items" : {
              "type" : "object"
            }
          },
          "items" : {
            "$ref" : "#/components/schemas/ContactPreferenceEntity"
          },
          "rowsInserted" : {
            "type" : "integer",
            "description" : "Number of rows inserted"
          }
        },
        "description" : "Response for upserting contact preferences"
      },
      "ContactAttributeName" : {
        "type" : "string",
        "description" : "The name of the contact attribute to search by",
        "enum" : [ "ContactKey", "LastModifiedDate", "SourceChannel", "Status", "AudienceID" ]
      },
      "UpsertContactRequest" : {
        "required" : [ "attributeSets" ],
        "type" : "object",
        "properties" : {
          "contactID" : {
            "type" : "string",
            "description" : "Unique ID for the contact. You must provide either a value for contactKey or contactID"
          },
          "contactKey" : {
            "type" : "string",
            "description" : "Primary address for the contact. You must provide either a value for contactKey or contactID"
          },
          "attributeSets" : {
            "type" : "array",
            "description" : "List of attribute sets for the contact",
            "items" : {
              "$ref" : "#/components/schemas/AttributeSet"
            }
          }
        },
        "description" : "Request body for creating a new contact",
        "example" : {
          "attributeSets" : [ {
            "items" : [ {
              "values" : [ {
                "name" : "Email Address",
                "value" : "aaron.cates+updated@salesforce.com"
              }, {
                "name" : "HTML Enabled",
                "value" : true
              } ]
            } ],
            "name" : "Email Addresses"
          }, {
            "items" : [ {
              "values" : [ {
                "name" : "Last Name",
                "value" : "Cates"
              }, {
                "name" : "First Name",
                "value" : "Aaron2"
              }, {
                "name" : "Country",
                "value" : "United States"
              }, {
                "name" : "Preferred Store",
                "value" : "San Francisco"
              } ]
            } ],
            "name" : "Email Demographics"
          } ],
          "contactKey" : "postmandemo1"
        }
      },
      "ContactDeleteRequestsResponse" : {
        "required" : [ "endDateUtc", "operations", "pageNumber", "pageSize", "requestServiceMessageID", "responseDateTime", "resultMessages", "serviceMessageID", "startDateUtc", "statusAsOfDateUtc" ],
        "type" : "object",
        "properties" : {
          "startDateUtc" : {
            "type" : "string",
            "description" : "The start date in UTC for the query.",
            "format" : "date-time"
          },
          "endDateUtc" : {
            "type" : "string",
            "description" : "The end date in UTC for the query.",
            "format" : "date-time"
          },
          "statusAsOfDateUtc" : {
            "type" : "string",
            "description" : "The status date in UTC.",
            "format" : "date-time"
          },
          "pageNumber" : {
            "type" : "integer",
            "description" : "The current page number."
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The number of items per page."
          },
          "operations" : {
            "type" : "array",
            "description" : "List of operations.",
            "items" : {
              "type" : "object",
              "additionalProperties" : true
            }
          },
          "requestServiceMessageID" : {
            "type" : "string",
            "description" : "ID of the request service message."
          },
          "responseDateTime" : {
            "type" : "string",
            "description" : "The response date and time.",
            "format" : "date-time"
          },
          "resultMessages" : {
            "type" : "array",
            "description" : "Array of result messages.",
            "items" : {
              "type" : "string"
            }
          },
          "serviceMessageID" : {
            "type" : "string",
            "description" : "ID of the service message."
          }
        },
        "additionalProperties" : true,
        "description" : "Response containing details of contact delete requests"
      },
      "ContactKeyEntities" : {
        "required" : [ "contactKey", "createDate" ],
        "type" : "object",
        "properties" : {
          "contactKey" : {
            "type" : "string",
            "description" : "Contact key of the email channel address"
          },
          "createDate" : {
            "type" : "string",
            "description" : "Contact key creation date",
            "format" : "date-time"
          }
        }
      },
      "ContactExitRequest" : {
        "required" : [ "ContactKey", "DefinitionKey" ],
        "type" : "object",
        "properties" : {
          "Versions" : {
            "type" : "array",
            "description" : "List of version numbers of the journey to remove contact from",
            "items" : {
              "type" : "integer"
            },
            "x-ballerina-name" : "versions"
          },
          "ContactKey" : {
            "type" : "string",
            "description" : "ID that uniquely identifies a subscriber or contact. Can be a single contact or an array of up to 50",
            "x-ballerina-name" : "contactKey"
          },
          "DefinitionKey" : {
            "type" : "string",
            "description" : "Customer Key that uniquely identifies the journey",
            "x-ballerina-name" : "definitionKey"
          }
        },
        "example" : [ {
          "ContactKey" : "DD301",
          "DefinitionKey" : "postman-demo1",
          "Versions" : [ 2 ]
        } ]
      },
      "SearchContactsByEmailRequest" : {
        "required" : [ "channelAddressList" ],
        "type" : "object",
        "properties" : {
          "channelAddressList" : {
            "type" : "array",
            "description" : "List of email channel addresses for which a contact key is requested",
            "items" : {
              "type" : "string"
            }
          },
          "maximumCount" : {
            "type" : "integer",
            "description" : "Number of contact keys associated with an email channel address. The default value is 1"
          }
        },
        "description" : "Request body for searching contacts by email channel address"
      },
      "Defaults" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "array",
            "description" : "An ordered list of email expressions used to determine which email address to use as the default.",
            "items" : {
              "type" : "string"
            }
          }
        },
        "additionalProperties" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "description" : "An object that contains default values for the journey, such as email expressions. Example: { \"email\": [\"{{Event.event-key.EmailAddress}}\", \"{{Contact.Default.Email}}\"] }"
      },
      "ContactPreferencesResponse" : {
        "type" : "object",
        "properties" : {
          "responseDateTime" : {
            "type" : "integer",
            "description" : "Date and time of the retry response in UTC"
          },
          "rowsAffected" : {
            "type" : "integer",
            "description" : "Number of rows returned"
          },
          "serviceMessageID" : {
            "type" : "string",
            "description" : "Service message ID for the response",
            "format" : "uuid"
          },
          "requestServiceMessageID" : {
            "type" : "string",
            "description" : "Service message ID for the request",
            "format" : "uuid"
          },
          "resultMessages" : {
            "type" : "array",
            "description" : "Array of messages about the request. Includes details, such as resulttype and resultcode, about a bad request",
            "items" : {
              "type" : "object"
            }
          },
          "value" : {
            "$ref" : "#/components/schemas/ContactPreferenceEntity"
          }
        },
        "description" : "Retrieved contact preferences by contact key"
      },
      "AddressValueSets" : {
        "type" : "object",
        "properties" : {
          "definitionName" : {
            "type" : "string",
            "description" : "Default name assigned to represent the Set Definition of value Set information for retrieved address"
          },
          "values" : {
            "type" : "array",
            "description" : "Object array containing property definition and actual value information of attributes retrieved for address",
            "items" : {
              "$ref" : "#/components/schemas/AddressValues"
            }
          },
          "definitionKey" : {
            "type" : "string",
            "description" : "Default key assigned to represent the Set Definition of value Set information for retrieved address"
          },
          "definitionID" : {
            "type" : "string",
            "description" : "Default ID assigned to represent the Set Definition of value Set information for retrieved address",
            "format" : "uuid"
          }
        }
      },
      "Journey" : {
        "required" : [ "key", "name", "workflowApiVersion" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "A unique identifier for this journey (read-only).",
            "readOnly" : true
          },
          "version" : {
            "type" : "integer",
            "description" : "The iteration/version number of the journey (read-only).",
            "readOnly" : true
          },
          "key" : {
            "type" : "string",
            "description" : "The customer-defined unique key for this journey."
          },
          "name" : {
            "type" : "string",
            "description" : "Display name of the journey in the UI."
          },
          "description" : {
            "type" : "string",
            "description" : "Human-readable explanation of the journey's purpose."
          },
          "workflowApiVersion" : {
            "type" : "number",
            "description" : "Version of the Journey Spec used."
          },
          "goals" : {
            "maxItems" : 1,
            "type" : "array",
            "description" : "An array of goals containing a single object. Journeys only support one goal.",
            "items" : {
              "$ref" : "#/components/schemas/Goal"
            }
          },
          "triggers" : {
            "maxItems" : 1,
            "type" : "array",
            "description" : "An array of triggers containing a single object. Journeys only support one trigger.",
            "items" : {
              "$ref" : "#/components/schemas/EventDefinition"
            }
          },
          "defaults" : {
            "$ref" : "#/components/schemas/Defaults"
          },
          "activities" : {
            "type" : "array",
            "description" : "An array that includes all the activities of the journey.",
            "items" : {
              "$ref" : "#/components/schemas/Activity"
            }
          }
        },
        "additionalProperties" : true,
        "description" : "Represents a complete journey definition",
        "example" : {
          "activities" : [ {
            "arguments" : { },
            "configurationArguments" : {
              "applicationExtensionKey" : "jb-email-activity",
              "triggeredSend" : {
                "emailId" : 182582,
                "emailSubject" : "Welcome to Makana",
                "isMultipart" : true,
                "isSalesforceTracking" : true,
                "isSendLogging" : true,
                "isTrackingClicks" : true,
                "name" : "Makana Welcome Email",
                "sendClassificationId" : "8da936da-9a40-e711-af11-78e3b50b7f0c",
                "suppressTracking" : false
              }
            },
            "description" : "",
            "key" : "postman-email-key-1",
            "metaData" : {
              "isConfigured" : true
            },
            "name" : "Welcome Email",
            "outcomes" : [ {
              "arguments" : { },
              "key" : "sent-email-now-wait",
              "metaData" : { },
              "next" : "welcome-email-then-wait"
            } ],
            "type" : "EMAILV2"
          }, {
            "configurationArguments" : {
              "waitDuration" : 1,
              "waitUnit" : "MINUTES"
            },
            "key" : "welcome-email-then-wait",
            "metaData" : {
              "isConfigured" : true,
              "waitType" : "duration"
            },
            "name" : "1 minute",
            "type" : "WAIT"
          } ],
          "defaults" : {
            "email" : [ "{{Event.APIEvent-0dbe46de-74f9-a309-7778-298c0a565f93.\"Email\"}}" ]
          },
          "description" : "Api created Journey",
          "entryMode" : "MultipleEntries",
          "goals" : [ ],
          "key" : "postman-demo",
          "name" : "Postman Demo",
          "triggers" : [ {
            "arguments" : { },
            "configurationArguments" : {
              "criteria" : ""
            },
            "description" : "",
            "key" : "TRIGGER",
            "metaData" : {
              "eventDefinitionId" : "e35aa03b-4a75-47e5-a855-92fa07dce953",
              "eventDefinitionKey" : "APIEvent-0dbe46de-74f9-a309-7778-298c0a565f93"
            },
            "name" : "api-event",
            "outcomes" : [ ],
            "type" : "APIEvent"
          } ],
          "workflowApiVersion" : 1
        }
      },
      "UpsertContactResponse" : {
        "required" : [ "contactID", "contactKey", "hasErrors", "isNewContactKey", "operationStatus", "responseDateTime", "rowsAffected" ],
        "type" : "object",
        "properties" : {
          "operationStatus" : {
            "type" : "string",
            "description" : "Status of the operation (e.g., OK)."
          },
          "rowsAffected" : {
            "type" : "integer",
            "description" : "Number of rows affected by the operation."
          },
          "contactKey" : {
            "type" : "string",
            "description" : "The unique key of the contact."
          },
          "contactID" : {
            "type" : "integer",
            "description" : "The system-generated ID of the contact."
          },
          "contactTypeID" : {
            "type" : "integer",
            "description" : "The type ID of the contact."
          },
          "isNewContactKey" : {
            "type" : "boolean",
            "description" : "Indicates whether the contact key is newly created."
          },
          "requestServiceMessageID" : {
            "type" : "string",
            "description" : "The ID of the request message."
          },
          "responseDateTime" : {
            "type" : "string",
            "description" : "The date and time of the response.",
            "format" : "date-time"
          },
          "hasErrors" : {
            "type" : "boolean",
            "description" : "Indicates if any errors occurred during the operation."
          },
          "resultMessages" : {
            "type" : "array",
            "description" : "List of result messages.",
            "items" : {
              "type" : "string"
            }
          },
          "serviceMessageID" : {
            "type" : "string",
            "description" : "The ID of the service message."
          }
        },
        "additionalProperties" : true
      },
      "ChannelAddressResponseEntities" : {
        "required" : [ "channelAddress", "contactKeyDetails" ],
        "type" : "object",
        "properties" : {
          "channelAddress" : {
            "type" : "string",
            "description" : "Channel address of the email channel"
          },
          "contactKeyDetails" : {
            "type" : "array",
            "description" : "Contact key details associated with the channel address",
            "items" : {
              "$ref" : "#/components/schemas/ContactKeyEntities"
            }
          }
        }
      },
      "ContactAttributeFilterCondition" : {
        "required" : [ "filterConditionOperator", "filterConditionValue" ],
        "type" : "object",
        "properties" : {
          "filterConditionOperator" : {
            "type" : "string",
            "description" : "Filter condition operator name"
          },
          "filterConditionValue" : {
            "type" : "string",
            "description" : "Value for attribute used in search criteria for contacts and associated addresses. When using the \"LastModifiedDate\" attributeName, separate the values for start and end date in the filterConditionValue with an \"AND\". The \"Channel\" attributeName supports these values: MOBILE PUSH LINE EMAIL"
          }
        },
        "description" : "Filter condition for searching contacts by attribute"
      },
      "ValidateEmailResponse" : {
        "type" : "object",
        "properties" : {
          "valid" : {
            "type" : "boolean",
            "description" : "Indicates whether the email address is valid"
          },
          "failedValidation" : {
            "type" : "string",
            "description" : "The validator that failed, if any"
          },
          "email" : {
            "type" : "string",
            "description" : "The email address that was validated"
          }
        },
        "example" : {
          "email" : "help@example.com",
          "valid" : false,
          "failedValidation" : "ListDetectiveValidator"
        }
      },
      "SearchPreferencesRequestItems" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/ItemsOneOf1"
        }, {
          "$ref" : "#/components/schemas/ItemsItemsOneOf12"
        } ]
      },
      "FireEventResponse" : {
        "type" : "object",
        "properties" : {
          "eventInstanceId" : {
            "type" : "string",
            "description" : "Unique ID for the fired event instance",
            "format" : "uuid"
          }
        },
        "additionalProperties" : true
      },
      "ContactMembershipRequest" : {
        "required" : [ "ContactKey" ],
        "type" : "object",
        "properties" : {
          "ContactKeyList" : {
            "type" : "array",
            "description" : "The list of unique keys that identify the contacts",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "contactKeyList"
          }
        },
        "example" : {
          "ContactKeyList" : [ "DD301", "0036A000002FDbFQAW" ]
        }
      },
      "UpdateJourney" : {
        "required" : [ "key", "modifiedDate", "name", "version", "workflowApiVersion" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Journey UUID (optional if key is provided)"
          },
          "key" : {
            "type" : "string",
            "description" : "Customer-defined journey key"
          },
          "name" : {
            "type" : "string",
            "description" : "Journey display name"
          },
          "description" : {
            "type" : "string",
            "description" : "Journey description (optional)"
          },
          "version" : {
            "type" : "integer",
            "description" : "Version number to update"
          },
          "workflowApiVersion" : {
            "type" : "number",
            "description" : "Journey spec version (0.5 or 1.0)",
            "format" : "float"
          },
          "modifiedDate" : {
            "type" : "string",
            "description" : "Current modifiedDate, required to prevent concurrent writes",
            "format" : "date-time"
          },
          "entryMode" : {
            "type" : "string",
            "description" : "Entry mode (e.g., APIEvent, Scheduled)"
          },
          "entryEvent" : {
            "$ref" : "#/components/schemas/EventDefinition"
          },
          "goals" : {
            "type" : "array",
            "description" : "Goals that define journey completion or exit criteria",
            "items" : {
              "$ref" : "#/components/schemas/Goal"
            }
          },
          "activities" : {
            "type" : "array",
            "description" : "Activities that define the steps in the journey",
            "items" : {
              "$ref" : "#/components/schemas/Activity"
            }
          }
        },
        "additionalProperties" : true,
        "description" : "Request body for updating an existing journey"
      },
      "JourneyStatus" : {
        "type" : "string",
        "description" : "A journey status value to use to filter the results. The ScheduledToSend, Sent, and Stopped statuses exist only in single-send journeys. If you don't specify a status value, the API returns all journeys regardless of their statuses",
        "enum" : [ "Deleted", "Draft", "Published", "ScheduledToPublish", "Stopped", "Unpublished", "ScheduledToSend", "Sent" ]
      },
      "AttributeSetItem" : {
        "required" : [ "values" ],
        "type" : "object",
        "properties" : {
          "values" : {
            "type" : "array",
            "description" : "List of name/value pairs for the attributes",
            "items" : {
              "$ref" : "#/components/schemas/AttributeSetValue"
            }
          }
        },
        "description" : "Represents an item in an attribute set, containing multiple attributes"
      },
      "NoChangeResponse" : {
        "required" : [ "documentation", "errorcode", "message" ],
        "type" : "object",
        "properties" : {
          "documentation" : {
            "type" : "string",
            "example" : ""
          },
          "message" : {
            "type" : "string",
            "example" : "No change has been processed, supplied data matches that on the server."
          },
          "errorcode" : {
            "type" : "integer",
            "example" : 304
          }
        },
        "description" : "Response indicating no changes were made"
      },
      "ContactPreferencesRequest" : {
        "required" : [ "items" ],
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "description" : "Array of contact IDs and other properties to add",
            "items" : {
              "$ref" : "#/components/schemas/ContactPreferenceEntity"
            }
          }
        },
        "description" : "Request to upsert contact preferences"
      },
      "ContactExitResponse" : {
        "type" : "object",
        "properties" : {
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContactExitStatus"
            }
          }
        },
        "additionalProperties" : true
      },
      "ItemsOneOf1" : {
        "type" : "string"
      },
      "AttributeSetValue" : {
        "required" : [ "name", "value" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the attribute"
          },
          "value" : {
            "description" : "Value of the attribute",
            "oneOf" : [ {
              "type" : "string"
            }, {
              "type" : "boolean"
            }, {
              "type" : "number"
            }, {
              "type" : "integer"
            } ]
          }
        },
        "description" : "Represents a name/value pair for an attribute"
      },
      "ContactExitStatus" : {
        "type" : "object",
        "properties" : {
          "contactKey" : {
            "type" : "string"
          },
          "definitionKey" : {
            "type" : "string"
          },
          "status" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContactExitStatusDetail"
            }
          }
        }
      },
      "DataExtensionRowSet" : {
        "type" : "array",
        "description" : "An array of data extension rows to be upserted",
        "example" : [ {
          "keys" : {
            "SubscriberKey" : "5c68f5c7f230288ba735091"
          },
          "values" : {
            "FirstName" : "John",
            "FollowerCount" : 2,
            "IsActive" : true,
            "LastLogin" : "2018-05-23T14:32:00Z",
            "LastName" : "Smith"
          }
        }, {
          "keys" : {
            "SubscriberKey" : "5c68f5c7f380288ba5091"
          },
          "values" : {
            "FirstName" : "Jane",
            "FollowerCount" : 2,
            "IsActive" : true,
            "LastLogin" : "2018-05-23T14:32:00Z",
            "LastName" : "Smith"
          }
        } ],
        "items" : {
          "$ref" : "#/components/schemas/DataExtensionRow"
        }
      },
      "ContactExitStatusDetail" : {
        "type" : "object",
        "properties" : {
          "definitionInstanceId" : {
            "type" : "string",
            "description" : "The unique identifier for the journey instance from which the contact was removed"
          },
          "message" : {
            "type" : "string",
            "description" : "A message providing additional information about the exit operation"
          },
          "version" : {
            "type" : "integer",
            "description" : "The version of the journey from which the contact was removed"
          }
        }
      },
      "ContactExitStatusResponse" : {
        "$ref" : "#/components/schemas/ContactExitStatus"
      },
      "AttributeSet" : {
        "required" : [ "items", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the attribute set (e.g., 'Email Addresses', 'Email Demographics')"
          },
          "items" : {
            "type" : "array",
            "description" : "List of items for the attribute set",
            "items" : {
              "$ref" : "#/components/schemas/AttributeSetItem"
            }
          }
        },
        "description" : "Represents a set of attributes for a contact"
      },
      "EventDefinitionSchedule" : {
        "required" : [ "EndType", "Frequency", "RecurrencePattern", "StartDateTime" ],
        "type" : "object",
        "properties" : {
          "StartDateTime" : {
            "type" : "string",
            "description" : "The first time the scheduled automation should run.",
            "format" : "date-time"
          },
          "EndDateTime" : {
            "type" : "string",
            "description" : "The last time the scheduled automation should run. Required if EndType = EndDate.",
            "format" : "date-time"
          },
          "Occurrences" : {
            "type" : "integer",
            "description" : "How many times the scheduled automation should run. Required if EndType = Occurrences."
          },
          "EndType" : {
            "type" : "string",
            "description" : "EndDate or Occurrences, indicates if automation schedule should stop after a specified date or a specified number of runs.",
            "enum" : [ "EndDate", "Occurrences" ]
          },
          "Frequency" : {
            "type" : "string",
            "description" : "Minutely, Hourly, Daily, Weekly, Monthly, Yearly",
            "enum" : [ "Minutely", "Hourly", "Daily", "Weekly", "Monthly", "Yearly" ]
          },
          "RecurrencePattern" : {
            "type" : "string",
            "description" : "Interval - used by Minutely, Hourly, Daily; EveryWeekDay - used by Daily; ByDay - used by Weekly, Monthly, Yearly; ByWeek - used by Monthly, Yearly",
            "enum" : [ "Interval", "EveryWeekDay", "ByDay", "ByWeek" ]
          },
          "Interval" : {
            "type" : "integer",
            "description" : "Used for Minutely, Hourly, Daily, Weekly, and Monthly schedules (not used for Yearly). Required if RecurrencePattern = Interval."
          },
          "Sunday" : {
            "type" : "boolean",
            "description" : "Only used for weekly schedules. May be null."
          },
          "Monday" : {
            "type" : "boolean",
            "description" : "Only used for weekly schedules. May be null."
          },
          "Tuesday" : {
            "type" : "boolean",
            "description" : "Only used for weekly schedules. May be null."
          },
          "Wednesday" : {
            "type" : "boolean",
            "description" : "Only used for weekly schedules. May be null."
          },
          "Thursday" : {
            "type" : "boolean",
            "description" : "Only used for weekly schedules. May be null."
          },
          "Friday" : {
            "type" : "boolean",
            "description" : "Only used for weekly schedules. May be null."
          },
          "Saturday" : {
            "type" : "boolean",
            "description" : "Only used for weekly schedules. May be null."
          },
          "ScheduledDay" : {
            "type" : "integer",
            "description" : "Day of month (1 to 31), used for Monthly and Yearly schedules."
          },
          "ScheduledDayOfWeek" : {
            "type" : "string",
            "description" : "Name of day of week (Sunday), used for Monthly and Yearly schedules."
          },
          "ScheduledWeek" : {
            "type" : "string",
            "description" : "First, Second, Third, Fourth, Last, used for Monthly and Yearly schedules.",
            "enum" : [ "First", "Second", "Third", "Fourth", "Last" ]
          }
        },
        "additionalProperties" : true,
        "description" : "Optionally define a schedule for the event. Used to trigger the event on a recurring basis"
      },
      "SearchPreferencesRequest" : {
        "required" : [ "items" ],
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "description" : "Array of contact keys or IDs to search for preferences",
            "items" : {
              "$ref" : "#/components/schemas/SearchPreferencesRequestItems"
            }
          }
        },
        "description" : "Request to search contact preferences"
      },
      "ItemsItemsOneOf12" : {
        "type" : "integer"
      },
      "ContactDeleteResponse" : {
        "required" : [ "hasErrors", "operationID", "operationInitiated", "requestServiceMessageID", "responseDateTime", "resultMessages", "serviceMessageID" ],
        "type" : "object",
        "properties" : {
          "operationInitiated" : {
            "type" : "boolean",
            "description" : "Indicates if the operation was initiated successfully"
          },
          "operationID" : {
            "type" : "integer",
            "description" : "Unique identifier for the initiated operation"
          },
          "requestServiceMessageID" : {
            "type" : "string",
            "description" : "ID of the request message"
          },
          "responseDateTime" : {
            "type" : "string",
            "description" : "Date and time of the response",
            "format" : "date-time"
          },
          "hasErrors" : {
            "type" : "boolean",
            "description" : "Indicates if there were any errors during the operation"
          },
          "resultMessages" : {
            "type" : "array",
            "description" : "List of result messages from the operation",
            "items" : {
              "type" : "object"
            }
          },
          "serviceMessageID" : {
            "type" : "string",
            "description" : "ID of the service message"
          }
        },
        "additionalProperties" : true
      },
      "ContactMembershipDetail" : {
        "type" : "object",
        "properties" : {
          "contactKey" : {
            "type" : "string"
          },
          "definitionKey" : {
            "type" : "string"
          },
          "version" : {
            "type" : "integer"
          }
        }
      },
      "ContactMembershipResponse" : {
        "type" : "object",
        "properties" : {
          "results" : {
            "$ref" : "#/components/schemas/ContactMembership"
          }
        }
      },
      "ContactDeleteRequest" : {
        "required" : [ "DeleteOperationType", "values" ],
        "type" : "object",
        "properties" : {
          "values" : {
            "type" : "array",
            "description" : "List of contact keys or IDs to delete",
            "items" : {
              "type" : "string"
            }
          },
          "DeleteOperationType" : {
            "type" : "string",
            "description" : "Type of delete operation to perform",
            "enum" : [ "ContactAndAttributes", "AttributesOnly" ],
            "x-ballerina-name" : "deleteOperationType"
          }
        },
        "example" : {
          "DeleteOperationType" : "ContactAndAttributes",
          "values" : [ "postmandemo2" ]
        }
      }
    },
    "parameters" : {
      "page" : {
        "name" : "$page",
        "in" : "query",
        "description" : "The page number of results to retrieve. The default value is 1",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "integer",
          "default" : 1
        },
        "x-ballerina-name" : "page"
      },
      "pageSize" : {
        "name" : "$pageSize",
        "in" : "query",
        "description" : "The number of items to return on a page of results. The default and maximum value is 50",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "maximum" : 50,
          "type" : "integer",
          "default" : 50
        },
        "x-ballerina-name" : "pageSize"
      },
      "extras" : {
        "name" : "extras",
        "in" : "query",
        "description" : "Additional information to include in the response. When you specify the all value for this parameter, the response includes a large amount of data. The volume of this data has a negative impact on the performance of this query",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "$ref" : "#/components/schemas/Extras"
        }
      }
    },
    "securitySchemes" : {
      "OAuth2ClientCredentials" : {
        "type" : "oauth2",
        "flows" : {
          "clientCredentials" : {
            "tokenUrl" : "https://{{et_subdomain}}.auth.marketingcloudapis.com/v2/token",
            "scopes" : { }
          }
        }
      }
    }
  }
}