// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/constraint;
import ballerina/data.jsondata;
import ballerina/http;
import ballerina/oauth2;

# List of event definitions
public type EventDefinitionList record {
    # Number of items per page
    int pageSize?;
    # Current page number
    int page?;
    # Array of event definitions
    EventDefinition[] items?;
};

# OAuth2 Client Credentials Grant Configs
public type OAuth2ClientCredentialsGrantConfig record {|
    *http:OAuth2ClientCredentialsGrantConfig;
    # Token url should not be provided
    never tokenUrl?;
    # Credential Bearer type to use for the request
    oauth2:CredentialBearer credentialBearer = oauth2:POST_BODY_BEARER;
    # The member ID (MID) of your Marketing Cloud account
    string accountId?;
|};

# Response for searching contact preferences
public type SearchPreferencesResponse record {
    # Date and time of the response
    string responseDateTime;
    # Number of rows returned
    int rowsAffected;
    # Service message ID for the response
    string serviceMessageID;
    # Service message ID for the request
    string requestServiceMessageID;
    # Array of messages about the request
    record {}[] resultMessages;
    # Array of contact preferences found
    ContactPreferenceEntity[] items;
};

public type Address record {
    # Type-value object specifying ContactID tied to given address
    record {} contactID?;
    # Type of the retrieved address: EMAIL: 1 MOBILE: 4 PUSH: 9 LINE: 10
    int addressTypeID?;
    # Type-value object specifying the AddressKey for retrieved address
    record {} addressKey?;
    # Last modified date value of retrieved address
    string modifiedDate?;
    # Type-value object specifying ContactKey tied to given address
    record {} contactKey?;
    # Object array containing value set information of pertinent attributes retrieved for address
    AddressValueSets[] valueSets?;
    # Source value of retrieved address
    int 'source?;
    # Type-value object specifying the AddressID for retrieved address
    record {} addressID?;
    # Status value of retrieved address
    int status?;
    # Ordinal value of retrieved address
    int ordinal?;
};

# Response containing a collection of journeys
public type JourneysList record {
    # Total number of journeys returned in this page
    int count;
    # Array of journey definitions
    Journey[] items;
    # Current page number
    int page;
    # Total number of available pages
    int pageSize;
};

public type AddressValues record {
    # An auto-generated guid representing a retrieved attribute value for the retrieved address
    string valueID?;
    # The value definition name of a retrieved attribute for retrieved address
    string definitionName?;
    # Actual value of a retrieved attribute for the retrieved address
    string innerValue?;
    # The value definition key of a retrieved attribute for retrieved address
    string definitionKey?;
    # The value definition ID of a retrieved attribute for retrieved address
    string definitionID?;
};

public type DataExtensionRow record {
    # A map of key fields for the data extension row. The property names and types are arbitrary and depend on the data extension definition
    record {} keys;
    # A map of value fields for the data extension row. The property names and types are arbitrary and depend on the data extension definition
    record {} values;
};

# Represents a single activity in a journey
public type Activity record {
    # The unique ID for the activity.
    string id?;
    # The unique customer key for the activity.
    string 'key;
    # The display name for this activity.
    string name?;
    # Defines the activity type. The expected input for each activity must be passed as an argument to operate correctly.
    string 'type;
    # An array of outcome objects.
    ActivityOutcomes[] outcomes?;
    # An object that represents the arguments that the activity expects to be passed at runtime. Each activity type requires a different set of parameters.
    record {} arguments?;
    # An object that represents the arguments that the activity expects to be passed at publish and runtime. Each activity type requires a different set of parameters.
    record {} configurationArguments?;
};

# Request body for validating an email address
public type ValidateEmailRequest record {
    # List of validators to apply to the email address
    ("SyntaxValidator"|"MXValidator"|"ListDetectiveValidator")[] validators;
    # Email address to validate
    string email;
};

# Represents the Queries record for the operation: deleteContact
public type DeleteContactQueries record {
    # Type of contact to delete. Possible values are: ids, keys. If not specified, defaults to 'ids'
    "ids"|"keys" 'type?;
};

# Represents an event definition in Journey Builder. An event definition is a reusable component that defines how an event is triggered and processed within a journey
public type EventDefinition record {
    # Schema information for an event. The call uses this information to create a data extension associated with the Event Definition. Only required when not providing a dataExtensionId value
    record {} schema?;
    # Unique customer key for the event definition. Used to reference this event in API calls and journeys
    string eventDefinitionKey;
    # Operation mode of the event definition. Can be 'Production' or 'Test'
    "Production"|"Test" mode?;
    # Optionally define a schedule for the event. Used to trigger the event on a recurring basis
    EventDefinitionSchedule schedule?;
    # Optional metadata for the event definition. Can include additional information or settings
    record {} metaData?;
    # A link to the application extension that defines the configuration screens for this type. Journey Builder uses this ID to filter shared entry sources. For example, for the Event Definition to be visible in the Existing Entry sources panel in the UI, this field must be populated. To obtain this value, perform a GET eventDefinition on similar events in Journey Builder
    string sourceApplicationExtensionId?;
    # If true, makes this event visible in the Journey Builder Event Picker UI
    boolean isVisibleInPicker?;
    # Optional configuration data for the event definition. Can include additional settings or parameters
    record {} configuration?;
    # Display name for the event definition. Visible in Journey Builder UI
    string name;
    # Optional description for the event definition, visible in UI
    string description?;
    # Type of the event definition (e.g., 'RestEvent')
    "Event"|"ContactEvent"|"DateEvent"|"RestEvent" 'type;
    # ID of the Data Extension used as the data source for the event. Optional if 'schema' is provided inline
    string dataExtensionId?;
};

# Extras to include. Values:
# - all: Fetch all extras
# - activities: Include journey activities
# - outcomes: Include journey outcomes
# - stats: Include journey statistics
# - '': No extras (default)
public type Extras "all"|"activities"|"outcomes"|"stats"|"";

# Represents a contact preference entity
public type ContactPreferenceEntity record {
    # Indicates whether a contact opted out of tracking information
    boolean hasOptedOutTracking?;
    # Unique ID for the contact
    int contactID;
};

public type ActivityOutcomes record {
    # The unique customer key for the outcome.
    string 'key;
    # A string that maps to a valid journey activity key.
    string next;
};

# Represents the Queries record for the operation: getCampaigns
public type GetCampaignsQueries record {
    # The field and sort method to use to sort the results. You can sort on these fields: modifiedDate, createdDate, name, and id. You can sort these fields in ascending (ASC) or descending (DESC) order. The default value is 'modifiedDate DESC'
    @http:Query {name: "$orderBy"}
    string orderBy?;
    # The page number of results to retrieve. The default value is 1
    @http:Query {name: "$page"}
    int page = 1;
    # The number of items to return on a page of results. The default and maximum value is 50
    @http:Query {name: "$pageSize"}
    int pageSize = 50;
};

public type FireEvent record {
    # Key of the entry event defined in Journey Builder
    @jsondata:Name {value: "EventDefinitionKey"}
    string eventDefinitionKey;
    # Unique identifier for the contact
    @jsondata:Name {value: "ContactKey"}
    string contactKey;
    # Additional attributes required by the entry event schema
    @jsondata:Name {value: "Data"}
    record {} data?;
};

# Represents a goal in a journey
public type Goal record {
    # The customer key for this goal.
    string 'key;
    # The display name for this goal.
    string name;
    # The type of goal this is (only option currently is ContactEvent).
    "ContactEvent" 'type?;
    # The description for this goal, will be displayed in the Journey Builder user interface.
    string description?;
    # A set of properties which are not specific to the definition or execution of this Event, but are related to it.
    record {} metaData?;
    # This value is used for deterministic evaluations of the goal, can be either 'percentage' or 'wholenumber'.
    "percentage"|"wholenumber" conversionUnit?;
    # Based on the conversionUnit this is the metric Journey Builder uses to determine if the goal has been satisfied.
    decimal conversionValue?;
};

public type ContactMembership record {
    ContactMembershipDetail[] contactMemberships?;
    string[] contactsNotFound?;
};

public type SearchContactsByAttributeResponse record {
    # Array of all address objects retrieved
    Address[] addresses?;
    # Page number of results retrieved
    int pageNumber?;
    # Indicates errors occured while processing the request
    boolean hasErrors?;
    # Service message ID value of the response
    string serviceMessageID?;
    # Page size of results retrieved
    int pageSize?;
    # Service message ID value of the request
    string requestServiceMessageID?;
    # Array of returned messages generated while processing the request
    record {}[] resultMessages?;
};

# Response contains a list of contact keys with their created date and time
public type SearchContactsByEmailResponse record {
    # Current operation status
    string operationStatus?;
    # Service message ID for the response
    string serviceMessageID?;
    # List of contact keys with their created date and time
    ChannelAddressResponseEntities[] channelAddressResponseEntities;
    # Service message ID for the request
    string requestServiceMessageID?;
};

# Response for upserting contact preferences
public type UpsertContactPreferencesResponse record {
    # Date and time of the response
    string responseDateTime;
    # Number of rows updated
    int rowsUpdated;
    # Service message ID for the response
    string serviceMessageID;
    # Number of rows deleted
    int rowsDeleted;
    # Service message ID for the request
    string requestServiceMessageID;
    # Array of messages about the request
    record {}[] resultMessages;
    # Represents a contact preference entity
    ContactPreferenceEntity items;
    # Number of rows inserted
    int rowsInserted;
};

# The name of the contact attribute to search by
public type ContactAttributeName "ContactKey"|"LastModifiedDate"|"SourceChannel"|"Status"|"AudienceID";

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    OAuth2ClientCredentialsGrantConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

# Request body for creating a new contact
public type UpsertContactRequest record {
    # Unique ID for the contact. You must provide either a value for contactKey or contactID
    string contactID?;
    # Primary address for the contact. You must provide either a value for contactKey or contactID
    string contactKey?;
    # List of attribute sets for the contact
    AttributeSet[] attributeSets;
};

# Represents the Queries record for the operation: getJourneyById
public type GetJourneyByIdQueries record {
    # A list of additional data to fetch. Available values are: all, activities, outcomes, and stats. Default is ''
    Extras extras?;
    # Version number of the journey to retrieve. If not provided, the latest version is returned
    int versionNumber?;
};

# Represents the Queries record for the operation: deleteJourneyById
public type DeleteJourneyByIdQueries record {
    # Version number of the journey to delete. If no version is specified, ALL versions associated with the provided ID will be deleted
    int versionNumber?;
};

# Response containing details of contact delete requests
public type ContactDeleteRequestsResponse record {
    # The start date in UTC for the query.
    string startDateUtc;
    # The end date in UTC for the query.
    string endDateUtc;
    # The status date in UTC.
    string statusAsOfDateUtc;
    # The current page number.
    int pageNumber;
    # The number of items per page.
    int pageSize;
    # List of operations.
    record {}[] operations;
    # ID of the request service message.
    string requestServiceMessageID;
    # The response date and time.
    string responseDateTime;
    # Array of result messages.
    string[] resultMessages;
    # ID of the service message.
    string serviceMessageID;
};

public type ContactKeyEntities record {
    # Contact key of the email channel address
    string contactKey;
    # Contact key creation date
    string createDate;
};

public type ContactExitRequest record {
    # List of version numbers of the journey to remove contact from
    @jsondata:Name {value: "Versions"}
    int[] versions?;
    # ID that uniquely identifies a subscriber or contact. Can be a single contact or an array of up to 50
    @jsondata:Name {value: "ContactKey"}
    string contactKey;
    # Customer Key that uniquely identifies the journey
    @jsondata:Name {value: "DefinitionKey"}
    string definitionKey;
};

# Represents the Queries record for the operation: getJourneyByKey
public type GetJourneyByKeyQueries record {
    # A list of additional data to fetch. Available values are: all, activities, outcomes, and stats. Default is ''
    Extras extras?;
    # Version number of the journey to retrieve. If not provided, the latest version is returned
    int versionNumber?;
};

# Represents the Queries record for the operation: getContactDeleteRequests
public type GetContactDeleteRequestsQueries record {
    # Delete request status ID. Use it to filter delete requests by status. Valid values are 1 - Processing, 5 - Completed, and 7 - Invalid
    1|5|7 statusid?;
    # End date and time in UTC of the date range
    string enddateutc?;
    # Determines which property to use for sorting and the direction in which to sort the data
    @http:Query {name: "$orderBy"}
    string orderBy?;
    # The page number of results to retrieve. The default value is 1
    @http:Query {name: "$page"}
    int page = 1;
    # The number of items to return on a page of results. The default and maximum value is 50
    @http:Query {name: "$pageSize"}
    int pageSize = 50;
    # Start date and time in UTC of the date range
    string startdateutc?;
};

# Request body for searching contacts by email channel address
public type SearchContactsByEmailRequest record {
    # List of email channel addresses for which a contact key is requested
    string[] channelAddressList;
    # Number of contact keys associated with an email channel address. The default value is 1
    int maximumCount?;
};

# An object that contains default values for the journey, such as email expressions. Example: { "email": ["{{Event.event-key.EmailAddress}}", "{{Contact.Default.Email}}"] }
public type Defaults record {|
    # An ordered list of email expressions used to determine which email address to use as the default.
    string[] email?;
    string[]...;
|};

# Represents a campaign in Salesforce Marketing Cloud
public type Campaign record {
    # The date and time the campaign was created.
    string createdDate;
    # The date and time the campaign was last modified.
    string modifiedDate;
    # The unique identifier for the campaign.
    string id;
    # The name of the campaign.
    string name;
    # A description of the campaign.
    string description;
    # A code used to identify the campaign.
    string campaignCode;
    # A color code associated with the campaign.
    string color;
    # Indicates if the campaign is marked as a favorite.
    boolean favorite;
};

# Retrieved contact preferences by contact key
public type ContactPreferencesResponse record {
    # Date and time of the retry response in UTC
    int responseDateTime?;
    # Number of rows returned
    int rowsAffected?;
    # Service message ID for the response
    string serviceMessageID?;
    # Service message ID for the request
    string requestServiceMessageID?;
    # Array of messages about the request. Includes details, such as resulttype and resultcode, about a bad request
    record {}[] resultMessages?;
    # Represents a contact preference entity
    ContactPreferenceEntity value?;
};

public type AddressValueSets record {
    # Default name assigned to represent the Set Definition of value Set information for retrieved address
    string definitionName?;
    # Object array containing property definition and actual value information of attributes retrieved for address
    AddressValues[] values?;
    # Default key assigned to represent the Set Definition of value Set information for retrieved address
    string definitionKey?;
    # Default ID assigned to represent the Set Definition of value Set information for retrieved address
    string definitionID?;
};

# Represents the Queries record for the operation: getJourneys
public type GetJourneysQueries record {
    # Use this parameter to specify whether to return the most recent version of each journey that matches the filter criteria. The default value is true
    boolean mostRecentVersionOnly = true;
    # The version number of the workflowApiVersion value to retrieve. The default value is 1
    decimal specificApiVersionNumber = 1;
    # The field and sort method to use to sort the results. You can sort on these fields: ModifiedDate, Name, Performance. You can sort these fields in ascending (ASC) or descending (DESC) order. The default value is modifiedDate DESC
    @http:Query {name: "$orderBy"}
    string orderBy?;
    # A search string to apply to the request. The API searches the name and description of each journey for this string, and returns all matching journeys
    string nameOrDescription?;
    # Additional information to include in the response. When you specify the all value for this parameter, the response includes a large amount of data. The volume of this data has a negative impact on the performance of this query
    Extras extras?;
    # A tag to use to filter the results. When you specify this parameter, the API returns only journeys with the specified tag
    string tag?;
    # The page number of results to retrieve. The default value is 1
    @http:Query {name: "$page"}
    int page = 1;
    # The number of items to return on a page of results. The default and maximum value is 50
    @http:Query {name: "$pageSize"}
    int pageSize = 50;
    # The type of definition to retrieve. The only accepted value is transactional, which retrieves all transactional send definitions
    "transactional" definitionType?;
    # The version number of the journey to retrieve. The default value is the currently published version or the latest version number that meets the other search criteria
    int versionNumber?;
    # A journey status value to use to filter the results. Possible values are: Deleted, Draft, Published, ScheduledToPublish, Stopped, Unpublished. The ScheduledToSend, Sent, and Stopped statuses exist only in single-send journeys. If you don't specify a status value, the API returns all journeys regardless of their statuses
    JourneyStatus status?;
};

# Represents a complete journey definition
public type Journey record {
    # A unique identifier for this journey (read-only).
    string id?;
    # The iteration/version number of the journey (read-only).
    int version?;
    # The customer-defined unique key for this journey.
    string 'key;
    # Display name of the journey in the UI.
    string name;
    # Human-readable explanation of the journey's purpose.
    string description?;
    # Version of the Journey Spec used.
    decimal workflowApiVersion;
    # An array of goals containing a single object. Journeys only support one goal.
    @constraint:Array {maxLength: 1}
    Goal[] goals?;
    # An array of triggers containing a single object. Journeys only support one trigger.
    @constraint:Array {maxLength: 1}
    EventDefinition[] triggers?;
    # An object that contains default values for the journey, such as email expressions. Example: { "email": ["{{Event.event-key.EmailAddress}}", "{{Contact.Default.Email}}"] }
    Defaults defaults?;
    # An array that includes all the activities of the journey.
    Activity[] activities?;
};

public type ChannelAddressResponseEntities record {
    # Channel address of the email channel
    string channelAddress;
    # Contact key details associated with the channel address
    ContactKeyEntities[] contactKeyDetails;
};

public type UpsertContactResponse record {
    # Status of the operation (e.g., OK).
    string operationStatus;
    # Number of rows affected by the operation.
    int rowsAffected;
    # The unique key of the contact.
    string contactKey;
    # The system-generated ID of the contact.
    int contactID;
    # The type ID of the contact.
    int contactTypeID?;
    # Indicates whether the contact key is newly created.
    boolean isNewContactKey;
    # The ID of the request message.
    string requestServiceMessageID?;
    # The date and time of the response.
    string responseDateTime;
    # Indicates if any errors occurred during the operation.
    boolean hasErrors;
    # List of result messages.
    string[] resultMessages?;
    # The ID of the service message.
    string serviceMessageID?;
};

public type ValidateEmailResponse record {
    # Indicates whether the email address is valid
    boolean valid?;
    # The validator that failed, if any
    string failedValidation?;
    # The email address that was validated
    string email?;
};

# Filter condition for searching contacts by attribute
public type ContactAttributeFilterCondition record {
    # Filter condition operator name
    string filterConditionOperator;
    # Value for attribute used in search criteria for contacts and associated addresses. When using the "LastModifiedDate" attributeName, separate the values for start and end date in the filterConditionValue with an "AND". The "Channel" attributeName supports these values: MOBILE PUSH LINE EMAIL
    string filterConditionValue;
};

# Represents a campaign in Salesforce Marketing Cloud
public type UpsertCampaign record {
    # The name of the campaign.
    string name;
    # A description of the campaign.
    string description;
    # A code used to identify the campaign.
    string campaignCode;
    # A color code associated with the campaign.
    string color;
    # Indicates if the campaign is marked as a favorite.
    boolean favorite;
};

public type FireEventResponse record {
    # Unique ID for the fired event instance
    string eventInstanceId?;
};

public type ContactMembershipRequest record {
    # The list of unique keys that identify the contacts
    @jsondata:Name {value: "ContactKeyList"}
    string[] contactKeyList?;
};

# Request body for updating an existing journey
public type UpdateJourney record {
    # Journey UUID (optional if key is provided)
    string id?;
    # Customer-defined journey key
    string 'key;
    # Journey display name
    string name;
    # Journey description (optional)
    string description?;
    # Version number to update
    int version;
    # Journey spec version (0.5 or 1.0)
    float workflowApiVersion;
    # Current modifiedDate, required to prevent concurrent writes
    string modifiedDate;
    # Entry mode (e.g., APIEvent, Scheduled)
    string entryMode?;
    # Represents an event definition in Journey Builder. An event definition is a reusable component that defines how an event is triggered and processed within a journey
    EventDefinition entryEvent?;
    # Goals that define journey completion or exit criteria
    Goal[] goals?;
    # Activities that define the steps in the journey
    Activity[] activities?;
};

# A journey status value to use to filter the results. The ScheduledToSend, Sent, and Stopped statuses exist only in single-send journeys. If you don't specify a status value, the API returns all journeys regardless of their statuses
public type JourneyStatus "Deleted"|"Draft"|"Published"|"ScheduledToPublish"|"Stopped"|"Unpublished"|"ScheduledToSend"|"Sent";

# Represents an item in an attribute set, containing multiple attributes
public type AttributeSetItem record {
    # List of name/value pairs for the attributes
    AttributeSetValue[] values;
};

public type ContactExitResponse record {
    ContactExitStatus[] errors?;
};

# Request to upsert contact preferences
public type ContactPreferencesRequest record {
    # Array of contact IDs and other properties to add
    ContactPreferenceEntity[] items;
};

# Represents a name/value pair for an attribute
public type AttributeSetValue record {
    # Name of the attribute
    string name;
    # Value of the attribute
    string|boolean|decimal|int value;
};

public type ContactExitStatus record {
    string contactKey?;
    string definitionKey?;
    ContactExitStatusDetail[] status?;
};

# Represents the Queries record for the operation: deleteJourneyByKey
public type DeleteJourneyByKeyQueries record {
    # Version number of the journey to delete. If no version is specified, ALL versions associated with the provided ID will be deleted
    int versionNumber?;
};

# An array of data extension rows to be upserted
public type DataExtensionRowSet DataExtensionRow[];

# Represents the Queries record for the operation: getEventDefinitions
public type GetEventDefinitionsQueries record {
    # Filter event definitions by name substring
    string name?;
    # The page number of results to retrieve. The default value is 1
    @http:Query {name: "$page"}
    int page = 1;
    # The number of items to return on a page of results. The default and maximum value is 50
    @http:Query {name: "$pageSize"}
    int pageSize = 50;
};

public type ContactExitStatusDetail record {
    # The unique identifier for the journey instance from which the contact was removed
    string definitionInstanceId?;
    # A message providing additional information about the exit operation
    string message?;
    # The version of the journey from which the contact was removed
    int version?;
};

# Represents the Queries record for the operation: searchContactPreferences
public type SearchContactPreferencesQueries record {
    # For contact key, use 1. For contact ID, use 2
    @http:Query {name: "ReferenceType"}
    1|2 referenceType;
};

public type ContactExitStatusResponse ContactExitStatus;

# Represents a set of attributes for a contact
public type AttributeSet record {
    # Name of the attribute set (e.g., 'Email Addresses', 'Email Demographics')
    string name;
    # List of items for the attribute set
    AttributeSetItem[] items;
};

# Optionally define a schedule for the event. Used to trigger the event on a recurring basis
public type EventDefinitionSchedule record {
    # The first time the scheduled automation should run.
    string StartDateTime;
    # The last time the scheduled automation should run. Required if EndType = EndDate.
    string EndDateTime?;
    # How many times the scheduled automation should run. Required if EndType = Occurrences.
    int Occurrences?;
    # EndDate or Occurrences, indicates if automation schedule should stop after a specified date or a specified number of runs.
    "EndDate"|"Occurrences" EndType;
    # Minutely, Hourly, Daily, Weekly, Monthly, Yearly
    "Minutely"|"Hourly"|"Daily"|"Weekly"|"Monthly"|"Yearly" Frequency;
    # Interval - used by Minutely, Hourly, Daily; EveryWeekDay - used by Daily; ByDay - used by Weekly, Monthly, Yearly; ByWeek - used by Monthly, Yearly
    "Interval"|"EveryWeekDay"|"ByDay"|"ByWeek" RecurrencePattern;
    # Used for Minutely, Hourly, Daily, Weekly, and Monthly schedules (not used for Yearly). Required if RecurrencePattern = Interval.
    int Interval?;
    # Only used for weekly schedules. May be null.
    boolean Sunday?;
    # Only used for weekly schedules. May be null.
    boolean Monday?;
    # Only used for weekly schedules. May be null.
    boolean Tuesday?;
    # Only used for weekly schedules. May be null.
    boolean Wednesday?;
    # Only used for weekly schedules. May be null.
    boolean Thursday?;
    # Only used for weekly schedules. May be null.
    boolean Friday?;
    # Only used for weekly schedules. May be null.
    boolean Saturday?;
    # Day of month (1 to 31), used for Monthly and Yearly schedules.
    int ScheduledDay?;
    # Name of day of week (Sunday), used for Monthly and Yearly schedules.
    string ScheduledDayOfWeek?;
    # First, Second, Third, Fourth, Last, used for Monthly and Yearly schedules.
    "First"|"Second"|"Third"|"Fourth"|"Last" ScheduledWeek?;
};

# Request to search contact preferences
public type SearchPreferencesRequest record {
    # Array of contact keys or IDs to search for preferences
    (string|int)[] items;
};

public type ContactDeleteResponse record {
    # Indicates if the operation was initiated successfully
    boolean operationInitiated;
    # Unique identifier for the initiated operation
    int operationID;
    # ID of the request message
    string requestServiceMessageID;
    # Date and time of the response
    string responseDateTime;
    # Indicates if there were any errors during the operation
    boolean hasErrors;
    # List of result messages from the operation
    record {}[] resultMessages;
    # ID of the service message
    string serviceMessageID;
};

public type ContactMembershipDetail record {
    string contactKey?;
    string definitionKey?;
    int version?;
};

public type ContactMembershipResponse record {
    ContactMembership results?;
};

public type CampaignList record {
    # Total number of campaigns.
    int count;
    # Current page number.
    int page;
    # Number of items per page.
    int pageSize;
    # Navigation links.
    record {} links;
    # List of campaign items.
    Campaign[] items;
};

public type ContactDeleteRequest record {
    # List of contact keys or IDs to delete
    string[] values;
    # Type of delete operation to perform
    @jsondata:Name {value: "DeleteOperationType"}
    "ContactAndAttributes"|"AttributesOnly" deleteOperationType;
};
